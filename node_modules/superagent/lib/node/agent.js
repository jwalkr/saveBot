<<<<<<< HEAD
=======
'use strict';
>>>>>>> 492119079cf7bb369896515b51e978afe33f76d1

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var CookieJar = require('cookiejar').CookieJar;
var CookieAccess = require('cookiejar').CookieAccessInfo;
var parse = require('url').parse;
var request = require('./index');
var methods = require('methods');
=======
const CookieJar = require('cookiejar').CookieJar;
const CookieAccess = require('cookiejar').CookieAccessInfo;
const parse = require('url').parse;
const request = require('../..');
const AgentBase = require('../agent-base');
let methods = require('methods');
>>>>>>> 492119079cf7bb369896515b51e978afe33f76d1

/**
 * Expose `Agent`.
 */

module.exports = Agent;

/**
 * Initialize a new `Agent`.
 *
 * @api public
 */

function Agent(options) {
<<<<<<< HEAD
  if (!(this instanceof Agent)) return new Agent(options);
  if (options) this._ca = options.ca;
  this.jar = new CookieJar;
}

=======
  if (!(this instanceof Agent)) {
    return new Agent(options);
  }
  AgentBase.call(this);
  this.jar = new CookieJar();

  if (options) {
    if (options.ca) {this.ca(options.ca);}
    if (options.key) {this.key(options.key);}
    if (options.pfx) {this.pfx(options.pfx);}
    if (options.cert) {this.cert(options.cert);}
  }
}

Agent.prototype = Object.create(AgentBase.prototype);

>>>>>>> 492119079cf7bb369896515b51e978afe33f76d1
/**
 * Save the cookies in the given `res` to
 * the agent's cookie jar for persistence.
 *
 * @param {Response} res
 * @api private
 */

<<<<<<< HEAD
Agent.prototype.saveCookies = function(res){
  var cookies = res.headers['set-cookie'];
=======
Agent.prototype._saveCookies = function(res) {
  const cookies = res.headers['set-cookie'];
>>>>>>> 492119079cf7bb369896515b51e978afe33f76d1
  if (cookies) this.jar.setCookies(cookies);
};

/**
 * Attach cookies when available to the given `req`.
 *
 * @param {Request} req
 * @api private
 */

<<<<<<< HEAD
Agent.prototype.attachCookies = function(req){
  var url = parse(req.url);
  var access = CookieAccess(url.hostname, url.pathname, 'https:' == url.protocol);
  var cookies = this.jar.getCookies(access).toValueString();
  req.cookies = cookies;
};

// generate HTTP verb methods
if (methods.indexOf('del') == -1) {
  // create a copy so we don't cause conflicts with
  // other packages using the methods package and
  // npm 3.x
  methods = methods.slice(0);
  methods.push('del');
}
methods.forEach(function(method){
  var name = method;
  method = 'del' == method ? 'delete' : method;

  method = method.toUpperCase();
  Agent.prototype[name] = function(url, fn){
    var req = request(method, url);
    req.ca(this._ca);

    req.on('response', this.saveCookies.bind(this));
    req.on('redirect', this.saveCookies.bind(this));
    req.on('redirect', this.attachCookies.bind(this, req));
    this.attachCookies(req);

    fn && req.end(fn);
    return req;
  };
});
=======
Agent.prototype._attachCookies = function(req) {
  const url = parse(req.url);
  const access = CookieAccess(
    url.hostname,
    url.pathname,
    'https:' == url.protocol
  );
  const cookies = this.jar.getCookies(access).toValueString();
  req.cookies = cookies;
};

methods.forEach(name => {
  const method = name.toUpperCase();
  Agent.prototype[name] = function(url, fn) {
    const req = new request.Request(method, url);

    req.on('response', this._saveCookies.bind(this));
    req.on('redirect', this._saveCookies.bind(this));
    req.on('redirect', this._attachCookies.bind(this, req));
    this._attachCookies(req);
    this._setDefaults(req);

    if (fn) {
      req.end(fn);
    }
    return req;
  };
});

Agent.prototype.del = Agent.prototype['delete'];
>>>>>>> 492119079cf7bb369896515b51e978afe33f76d1
